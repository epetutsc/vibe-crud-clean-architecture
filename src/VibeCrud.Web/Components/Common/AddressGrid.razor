@using VibeCrud.Application.DTOs

<div class="grid-container">
    <div class="grid-header">
        <div class="grid-filters">
            <input type="text" class="form-control" placeholder="Search..." @bind="FilterValue" @onkeypress="OnFilterKeyPress" />
            <button class="btn btn-primary" @onclick="ApplyFilter">Search</button>
            <button class="btn btn-secondary" @onclick="ClearFilter">Clear</button>
        </div>
        <div class="grid-actions">
            <button class="btn btn-success" @onclick="OnAdd">Add New</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th @onclick="() => Sort(nameof(AddressDto.FirstName))" class="sortable">
                        First Name
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.FirstName))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.LastName))" class="sortable">
                        Last Name
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.LastName))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.Street))" class="sortable">
                        Street
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.Street))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.City))" class="sortable">
                        City
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.City))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.ZipCode))" class="sortable">
                        Zip Code
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.ZipCode))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.Country))" class="sortable">
                        Country
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.Country))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.Email))" class="sortable">
                        Email
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.Email))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th @onclick="() => Sort(nameof(AddressDto.Phone))" class="sortable">
                        Phone
                        <span class="sort-indicator">
                            @if (SortBy == nameof(AddressDto.Phone))
                            {
                                @(SortDirection == "asc" ? "↑" : "↓")
                            }
                        </span>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (IsLoading)
                {
                    <tr>
                        <td colspan="9" class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>
                }
                else if (Addresses?.Any() == true)
                {
                    @foreach (var address in Addresses)
                    {
                        <tr>
                            <td>@address.FirstName</td>
                            <td>@address.LastName</td>
                            <td>@address.Street @address.HouseNumber</td>
                            <td>@address.City</td>
                            <td>@address.ZipCode</td>
                            <td>@address.Country</td>
                            <td>@address.Email</td>
                            <td>@address.Phone</td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => OnEdit(address)">Edit</button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => OnDelete(address)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9" class="text-center">No addresses found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="grid-footer">
        <div class="pagination-info">
            Showing @GetDisplayRange() of @TotalItems addresses
        </div>
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(CurrentPage == 1)">First</button>
                </li>
                <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">Previous</button>
                </li>
                
                @for (int i = Math.Max(1, CurrentPage - 2); i <= Math.Min(TotalPages, CurrentPage + 2); i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                    </li>
                }
                
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">Next</button>
                </li>
                <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(TotalPages)" disabled="@(CurrentPage == TotalPages)">Last</button>
                </li>
            </ul>
        </nav>
        <div class="page-size-selector">
            <label>Page Size: </label>
            <select class="form-select" @onchange="HandlePageSizeChange">
                <option value="10" selected="@(PageSize == 10)">10</option>
                <option value="25" selected="@(PageSize == 25)">25</option>
                <option value="50" selected="@(PageSize == 50)">50</option>
                <option value="100" selected="@(PageSize == 100)">100</option>
            </select>
        </div>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<AddressDto> Addresses { get; set; } = new List<AddressDto>();
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int TotalItems { get; set; } = 0;
    [Parameter] public string SortBy { get; set; } = string.Empty;
    [Parameter] public string SortDirection { get; set; } = "asc";
    [Parameter] public string FilterValue { get; set; } = string.Empty;
    [Parameter] public bool IsLoading { get; set; } = false;
    
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }
    [Parameter] public EventCallback<(string SortBy, string SortDirection)> OnSortChanged { get; set; }
    [Parameter] public EventCallback<string> OnFilterChanged { get; set; }
    [Parameter] public EventCallback OnAddClicked { get; set; }
    [Parameter] public EventCallback<AddressDto> OnEditClicked { get; set; }
    [Parameter] public EventCallback<AddressDto> OnDeleteClicked { get; set; }

    private int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    protected override async Task OnParametersSetAsync()
    {
        // Handle page size changes through binding
        await base.OnParametersSetAsync();
    }

    private async Task Sort(string sortBy)
    {
        if (SortBy == sortBy)
        {
            SortDirection = SortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            SortBy = sortBy;
            SortDirection = "asc";
        }

        await OnSortChanged.InvokeAsync((SortBy, SortDirection));
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        
        CurrentPage = page;
        await OnPageChanged.InvokeAsync(page);
    }

    private async Task HandlePageSizeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            PageSize = newPageSize;
            CurrentPage = 1;
            await OnPageSizeChanged.InvokeAsync(newPageSize);
        }
    }

    private async Task ApplyFilter()
    {
        CurrentPage = 1;
        await OnFilterChanged.InvokeAsync(FilterValue);
    }

    private async Task ClearFilter()
    {
        FilterValue = string.Empty;
        CurrentPage = 1;
        await OnFilterChanged.InvokeAsync(string.Empty);
    }

    private async Task OnFilterKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ApplyFilter();
        }
    }

    private async Task OnAdd()
    {
        await OnAddClicked.InvokeAsync();
    }

    private async Task OnEdit(AddressDto address)
    {
        await OnEditClicked.InvokeAsync(address);
    }

    private async Task OnDelete(AddressDto address)
    {
        await OnDeleteClicked.InvokeAsync(address);
    }

    private string GetDisplayRange()
    {
        if (TotalItems == 0) return "0";
        
        var start = (CurrentPage - 1) * PageSize + 1;
        var end = Math.Min(CurrentPage * PageSize, TotalItems);
        return $"{start}-{end}";
    }
}